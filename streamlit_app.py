import streamlit as st
from PIL import Image
import firebase_utils
import gemini_utils
import os

# --- PAGE CONFIGURATION ---
st.set_page_config(
    page_title="Inventario Inteligente",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- INITIALIZATION ---
# Usamos un placeholder mientras se conecta
status_placeholder = st.empty()
with status_placeholder.container():
    with st.spinner("Conectando con la base de datos de Firebase..."):
        try:
            firebase_utils.initialize_firebase()
            status_placeholder.success("‚úÖ Conexi√≥n con Firebase exitosa.")
        except Exception as e:
            st.error(f"""
                **Error de Conexi√≥n con Firebase.** Aseg√∫rate de que los secretos en Streamlit Cloud est√©n configurados correctamente.  
                **Detalles del error:** {e}
            """)
            st.stop()

# --- TITLE AND DESCRIPTION ---
st.title("üì¶ Inventario Inteligente con IA")
st.markdown("Identifica art√≠culos de tu inventario en tiempo real con la c√°mara, usando **Gemini AI** y **Firebase**.")

# --- INTERFACE STRUCTURE ---
col1, col2 = st.columns([2, 1])

# --- Column 2: Control Panel (Inventory and Results) ---
with col2:
    st.header("üìä Panel de Control")

    try:
        # Usamos cache para no llamar a la base de datos en cada re-render
        @st.cache_data(ttl=60)
        def get_inventory_cached():
            return firebase_utils.get_inventory()

        inventory_list = get_inventory_cached()
        inventory_names = [item['name'] for item in inventory_list]
    except Exception as e:
        st.error(f"Error al cargar inventario: {e}")
        inventory_names = []

    with st.expander("‚ûï A√±adir Nuevo Art√≠culo", expanded=True):
        new_item_name = st.text_input("Nombre del art√≠culo", key="new_item", placeholder="Ej: Laptop, Taza, Silla")
        if st.button("Guardar en Firebase", use_container_width=True):
            if new_item_name and new_item_name.strip() and new_item_name not in inventory_names:
                firebase_utils.add_item(new_item_name.strip())
                st.success(f"'{new_item_name}' a√±adido.")
                st.cache_data.clear() # Limpiamos el cache para que se actualice la lista
                st.rerun()
            else:
                st.warning("El nombre no puede estar vac√≠o o ya existe.")

    st.subheader("üìã Inventario Actual en Firebase")
    if inventory_names:
        st.dataframe(inventory_names, use_container_width=True, column_config={"value": "Art√≠culo"})
    else:
        st.info("Tu inventario est√° vac√≠o. A√±ade un art√≠culo o crea la colecci√≥n 'inventory' en Firebase.")
    
    st.subheader("ü§ñ Resultado del An√°lisis")
    result_placeholder = st.empty()
    if 'last_result' in st.session_state:
        result_placeholder.success(f"**Art√≠culo Identificado:** {st.session_state.last_result}")
    else:
        result_placeholder.info("Esperando an√°lisis de imagen...")

# --- Column 1: Camera and Visualization ---
with col1:
    st.header("üì∑ Captura y An√°lisis")
    img_buffer = st.camera_input("Apunta al art√≠culo y toma una foto", key="camera")

    if img_buffer:
        img_pil = Image.open(img_buffer)

        # --- INICIO DE LA MEJORA DE VELOCIDAD ---
        # Reducimos el tama√±o de la imagen antes de enviarla a Gemini.
        # Im√°genes m√°s peque√±as se procesan m√°s r√°pido.
        max_width = 512
        if img_pil.width > max_width:
            aspect_ratio = img_pil.height / img_pil.width
            new_height = int(max_width * aspect_ratio)
            img_pil_resized = img_pil.resize((max_width, new_height))
        else:
            img_pil_resized = img_pil
        # --- FIN DE LA MEJORA ---

        st.image(img_pil, caption="Imagen lista para analizar", use_column_width=True)

        if st.button("‚ú® Analizar con Gemini", type="primary", use_container_width=True):
            if not inventory_names:
                st.warning("A√±ade al menos un art√≠culo a tu inventario antes de analizar.")
            else:
                with st.spinner("üß† Gemini est√° identificando el art√≠culo..."):
                    # Usamos la imagen redimensionada para el an√°lisis
                    result = gemini_utils.identify_item(img_pil_resized, inventory_names)
                    st.session_state.last_result = result
                    st.rerun()
