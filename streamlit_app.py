import streamlit as st
import os
import cv2
import numpy as np
from PIL import Image
import json
import base64
import logging
from datetime import datetime
from ultralytics import YOLO
from firebase_utils import FirebaseUtils
from gemini_utils import GeminiUtils
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configurar directorio de YOLO
os.environ['YOLO_CONFIG_DIR'] = '/tmp/Ultralytics'

# Configurar p√°gina
st.set_page_config(
    page_title="Sistema de Reconocimiento de Inventario con IA",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .feature-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 1rem 0;
    }
    .stats-box {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem 0;
    }
    .author-info {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 10px;
        border: 2px solid #1f77b4;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">ü§ñ Sistema de Reconocimiento de Inventario con IA</h1>', unsafe_allow_html=True)

# Inicializar servicios con cache
@st.cache_resource
def load_yolo_model():
    """Carga el modelo YOLO"""
    try:
        logger.info("Cargando modelo YOLOv8...")
        model = YOLO('yolov8m.pt')
        logger.info("Modelo YOLOv8 cargado.")
        return model
    except Exception as e:
        logger.error(f"Error al cargar YOLO: {e}")
        return None

@st.cache_resource
def initialize_services():
    """Inicializa Firebase y Gemini"""
    try:
        firebase = FirebaseUtils()
        gemini = GeminiUtils()
        return firebase, gemini
    except Exception as e:
        logger.error(f"Error al inicializar servicios: {e}")
        return None, None

# Cargar servicios
yolo_model = load_yolo_model()
firebase, gemini = initialize_services()

if yolo_model is None or firebase is None or gemini is None:
    st.error("‚ùå Error al inicializar los servicios. Verifica la configuraci√≥n.")
    st.stop()

# Sidebar con navegaci√≥n
st.sidebar.title("üìã Navegaci√≥n")
page = st.sidebar.selectbox(
    "Selecciona una opci√≥n:",
    [
        "üè† Inicio", 
        "üì∏ C√°mara en Vivo", 
        "üìÅ Subir Imagen", 
        "üìù An√°lisis de Texto", 
        "üìä Dashboard", 
        "üóÉÔ∏è Base de Datos", 
        "üë• Informaci√≥n del Proyecto",
        "‚öôÔ∏è Configuraci√≥n"
    ]
)

# P√°gina de Inicio
if page == "üè† Inicio":
    st.header("üè† Bienvenido al Sistema de Reconocimiento de Inventario")
    
    # Estad√≠sticas r√°pidas
    try:
        items = firebase.get_all_inventory_items()
        total_items = len(items)
        image_items = len([item for item in items if item.get('tipo') == 'imagen'])
        text_items = len([item for item in items if item.get('tipo') == 'texto'])
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="stats-box">
                <h3>{total_items}</h3>
                <p>Total Elementos</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="stats-box">
                <h3>{image_items}</h3>
                <p>Im√°genes Analizadas</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="stats-box">
                <h3>{text_items}</h3>
                <p>Descripciones Procesadas</p>
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.warning(f"Error al cargar estad√≠sticas: {e}")
    
    # Caracter√≠sticas principales
    st.subheader("üöÄ Caracter√≠sticas Principales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="feature-box">
            <h4>üì∏ An√°lisis por C√°mara en Vivo</h4>
            <p>Captura im√°genes en tiempo real usando tu c√°mara web para an√°lisis inmediato con YOLO e IA.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-box">
            <h4>üìÅ Subida de Archivos</h4>
            <p>Sube im√°genes desde tu dispositivo para an√°lisis detallado con Gemini AI.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-box">
            <h4>üìù An√°lisis de Texto</h4>
            <p>Describe elementos de inventario y obt√©n an√°lisis estructurado con IA.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-box">
            <h4>üìä Dashboard Completo</h4>
            <p>Visualiza estad√≠sticas y tendencias de tu inventario con gr√°ficos interactivos.</p>
        </div>
        """, unsafe_allow_html=True)

# P√°gina de C√°mara en Vivo
elif page == "üì∏ C√°mara en Vivo":
    st.header("üì∏ An√°lisis con C√°mara en Vivo")
    
    # Opciones de c√°mara
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.info("üé• Activa tu c√°mara para capturar y analizar elementos de inventario en tiempo real")
    
    with col2:
        auto_analyze = st.checkbox("üîÑ An√°lisis Autom√°tico", value=True)
        confidence_threshold = st.slider("üéØ Umbral de Confianza", 0.1, 1.0, 0.5, 0.1)
    
    # Componente de c√°mara
    picture = st.camera_input("üì∑ Toma una foto")
    
    if picture is not None:
        # Convertir a imagen PIL
        image = Image.open(picture)
        
        # Mostrar imagen original
        st.subheader("üì∏ Imagen Capturada")
        st.image(image, caption="Imagen capturada", width='stretch')
        
        # Convertir a formato OpenCV
        img_array = np.array(image)
        img_cv = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
        
        # An√°lisis con YOLO
        if st.button("üîç Analizar con YOLO") or auto_analyze:
            with st.spinner("Analizando con YOLO..."):
                try:
                    results = yolo_model(img_cv)
                    
                    # Procesar resultados
                    detections = []
                    annotated_image = img_cv.copy()
                    
                    for r in results:
                        if len(r.boxes) > 0:
                            for box in r.boxes:
                                conf = box.conf.item()
                                if conf >= confidence_threshold:
                                    cls = int(box.cls.item())
                                    label = yolo_model.names[cls]
                                    
                                    # Coordenadas del bounding box
                                    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                                    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)
                                    
                                    # Dibujar bounding box
                                    cv2.rectangle(annotated_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                    cv2.putText(annotated_image, f"{label}: {conf:.2f}", 
                                              (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                                    
                                    detections.append({
                                        'label': label,
                                        'confidence': conf,
                                        'bbox': [x1, y1, x2, y2]
                                    })
                    
                    # Mostrar imagen anotada
                    if detections:
                        st.subheader("üéØ Detecciones YOLO")
                        annotated_rgb = cv2.cvtColor(annotated_image, cv2.COLOR_BGR2RGB)
                        st.image(annotated_rgb, caption="Detecciones YOLO", width='stretch')
                        
                        # Mostrar informaci√≥n de detecciones
                        st.subheader("üìã Informaci√≥n de Detecciones")
                        for i, detection in enumerate(detections, 1):
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.write(f"**Elemento {i}:** {detection['label']}")
                            with col2:
                                st.write(f"**Confianza:** {detection['confidence']:.2f}")
                            with col3:
                                st.write(f"**Posici√≥n:** {detection['bbox']}")
                    else:
                        st.warning("No se detectaron objetos con el umbral de confianza seleccionado")
                        
                except Exception as e:
                    st.error(f"Error en an√°lisis YOLO: {e}")
        
        # An√°lisis con Gemini AI
        st.subheader("üß† An√°lisis con Gemini AI")
        description = st.text_input("Descripci√≥n adicional (opcional):")
        
        if st.button("üß† Analizar con IA"):
            with st.spinner("Analizando con Gemini AI..."):
                try:
                    # Convertir imagen a bytes
                    image_bytes = picture.getvalue()
                    
                    # Analizar con Gemini
                    analysis = gemini.analyze_image(image_bytes, description)
                    
                    st.subheader("üìù Resultado del An√°lisis IA:")
                    st.text_area("An√°lisis:", analysis, height=200)
                    
                    # Opci√≥n para guardar
                    if st.button("üíæ Guardar en Inventario"):
                        try:
                            data = {
                                "tipo": "camera",
                                "archivo": f"camera_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg",
                                "descripcion": description,
                                "analisis": analysis,
                                "detections": detections if 'detections' in locals() else [],
                                "timestamp": firebase.get_timestamp()
                            }
                            
                            doc_id = firebase.save_inventory_item(data)
                            st.success(f"‚úÖ Guardado en inventario con ID: {doc_id}")
                            
                        except Exception as e:
                            st.error(f"Error al guardar: {e}")
                            
                except Exception as e:
                    st.error(f"Error en an√°lisis Gemini: {e}")

# P√°gina de Subir Imagen
elif page == "üìÅ Subir Imagen":
    st.header("üìÅ An√°lisis de Imagen Subida")
    
    uploaded_file = st.file_uploader(
        "Sube una imagen para analizar",
        type=['png', 'jpg', 'jpeg', 'gif', 'bmp'],
        help="Formatos soportados: PNG, JPG, JPEG, GIF, BMP"
    )
    
    if uploaded_file is not None:
        # Mostrar imagen
        image = Image.open(uploaded_file)
        st.image(image, caption="Imagen subida", width='stretch')
        
        # Informaci√≥n del archivo
        col1, col2, col3 = st.columns(3)
        with col1:
            st.info(f"üìÅ **Archivo:** {uploaded_file.name}")
        with col2:
            st.info(f"üìè **Tama√±o:** {image.size}")
        with col3:
            st.info(f"üé® **Formato:** {image.format}")
        
        # An√°lisis con YOLO
        if st.button("üîç Analizar con YOLO"):
            with st.spinner("Analizando con YOLO..."):
                try:
                    results = yolo_model(image)
                    st.subheader("üéØ Resultados YOLO:")
                    
                    for r in results:
                        im_array = r.plot()
                        st.image(im_array, caption="Detecci√≥n YOLO", width='stretch')
                        
                        if len(r.boxes) > 0:
                            st.write("**Elementos detectados:**")
                            for box in r.boxes:
                                conf = box.conf.item()
                                cls = int(box.cls.item())
                                label = yolo_model.names[cls]
                                st.write(f"- {label}: {conf:.2f} confianza")
                        else:
                            st.write("No se detectaron objetos")
                            
                except Exception as e:
                    st.error(f"Error en an√°lisis YOLO: {e}")
        
        # An√°lisis con Gemini
        description = st.text_input("Descripci√≥n adicional (opcional):")
        
        if st.button("üß† Analizar con Gemini AI"):
            with st.spinner("Analizando con Gemini AI..."):
                try:
                    image_bytes = uploaded_file.getvalue()
                    analysis = gemini.analyze_image(image_bytes, description)
                    
                    st.subheader("üìù An√°lisis Gemini AI:")
                    st.text_area("Resultado:", analysis, height=200)
                    
                    if st.button("üíæ Guardar en Inventario"):
                        try:
                            data = {
                                "tipo": "imagen",
                                "archivo": uploaded_file.name,
                                "descripcion": description,
                                "analisis": analysis,
                                "timestamp": firebase.get_timestamp()
                            }
                            
                            doc_id = firebase.save_inventory_item(data)
                            st.success(f"‚úÖ Guardado en inventario con ID: {doc_id}")
                            
                        except Exception as e:
                            st.error(f"Error al guardar: {e}")
                            
                except Exception as e:
                    st.error(f"Error en an√°lisis Gemini: {e}")

# P√°gina de An√°lisis de Texto
elif page == "üìù An√°lisis de Texto":
    st.header("üìù An√°lisis de Texto con IA")
    
    # Plantillas de texto
    st.subheader("üìã Plantillas de Ejemplo")
    template = st.selectbox(
        "Selecciona una plantilla:",
        ["Personalizado", "Laptops", "Muebles", "Equipos Electr√≥nicos", "Herramientas"]
    )
    
    templates = {
        "Laptops": "15 laptops Dell Inspiron, estado bueno, modelo 2023, color negro",
        "Muebles": "5 escritorios de oficina, madera, estado regular, necesita mantenimiento",
        "Equipos Electr√≥nicos": "10 monitores Samsung 24 pulgadas, estado excelente, LED",
        "Herramientas": "20 destornilladores Phillips, metal, estado bueno, varios tama√±os"
    }
    
    if template != "Personalizado":
        text_input = st.text_area(
            "Describe los elementos de inventario:",
            value=templates[template],
            height=100
        )
    else:
        text_input = st.text_area(
            "Describe los elementos de inventario:",
            placeholder="Ej: 10 laptops Dell, estado bueno, modelo Inspiron 15...",
            height=100
        )
    
    if st.button("üß† Analizar Descripci√≥n"):
        if text_input.strip():
            with st.spinner("Analizando descripci√≥n..."):
                try:
                    analysis = gemini.generate_description(text_input)
                    
                    st.subheader("üìù An√°lisis de la Descripci√≥n:")
                    st.text_area("Resultado:", analysis, height=200)
                    
                    # Bot√≥n para guardar
                    if st.button("üíæ Guardar An√°lisis"):
                        try:
                            data = {
                                "tipo": "texto",
                                "descripcion": text_input,
                                "analisis": analysis,
                                "timestamp": firebase.get_timestamp()
                            }
                            
                            doc_id = firebase.save_inventory_item(data)
                            st.success(f"‚úÖ Guardado en inventario con ID: {doc_id}")
                            
                        except Exception as e:
                            st.error(f"Error al guardar: {e}")
                except Exception as e:
                    st.error(f"Error en an√°lisis: {e}")
        else:
            st.warning("Por favor, ingresa una descripci√≥n")

# P√°gina de Dashboard
elif page == "üìä Dashboard":
    st.header("üìä Dashboard de Inventario")
    
    try:
        items = firebase.get_all_inventory_items()
        
        if items:
            # Estad√≠sticas generales
            st.subheader("üìà Estad√≠sticas Generales")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Total Elementos", len(items))
            
            with col2:
                image_count = len([item for item in items if item.get('tipo') == 'imagen'])
                st.metric("Im√°genes", image_count)
            
            with col3:
                text_count = len([item for item in items if item.get('tipo') == 'texto'])
                st.metric("Textos", text_count)
            
            with col4:
                camera_count = len([item for item in items if item.get('tipo') == 'camera'])
                st.metric("C√°mara", camera_count)
            
            # Gr√°fico de tipos
            st.subheader("üìä Distribuci√≥n por Tipo")
            type_counts = {}
            for item in items:
                tipo = item.get('tipo', 'desconocido')
                type_counts[tipo] = type_counts.get(tipo, 0) + 1
            
            if type_counts:
                fig = px.pie(
                    values=list(type_counts.values()),
                    names=list(type_counts.keys()),
                    title="Distribuci√≥n de Elementos por Tipo"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # Gr√°fico temporal
            st.subheader("üìÖ Actividad Temporal")
            dates = []
            for item in items:
                timestamp = item.get('timestamp', '')
                if timestamp:
                    try:
                        date = datetime.fromisoformat(timestamp.replace('Z', '+00:00')).date()
                        dates.append(date)
                    except:
                        pass
            
            if dates:
                date_counts = pd.Series(dates).value_counts().sort_index()
                fig = px.line(
                    x=date_counts.index,
                    y=date_counts.values,
                    title="Elementos Agregados por Fecha"
                )
                fig.update_xaxes(title="Fecha")
                fig.update_yaxes(title="Cantidad")
                st.plotly_chart(fig, use_container_width=True)
            
            # Tabla de elementos recientes
            st.subheader("üïí Elementos Recientes")
            recent_items = sorted(items, key=lambda x: x.get('timestamp', ''), reverse=True)[:10]
            
            df_data = []
            for item in recent_items:
                df_data.append({
                    'Tipo': item.get('tipo', 'N/A'),
                    'Archivo': item.get('archivo', 'N/A'),
                    'Fecha': item.get('timestamp', 'N/A')[:10] if item.get('timestamp') else 'N/A',
                    'ID': item.get('id', 'N/A')[:8] + '...'
                })
            
            if df_data:
                df = pd.DataFrame(df_data)
                st.dataframe(df, use_container_width=True)
            
        else:
            st.info("No hay elementos en el inventario para mostrar estad√≠sticas")
            
    except Exception as e:
        st.error(f"Error al cargar dashboard: {e}")

# P√°gina de Base de Datos
elif page == "üóÉÔ∏è Base de Datos":
    st.header("üóÉÔ∏è Gesti√≥n de Base de Datos")
    
    # Filtros
    st.subheader("üîç Filtros de B√∫squeda")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filter_type = st.selectbox("Filtrar por tipo:", ["Todos", "imagen", "texto", "camera"])
    
    with col2:
        date_filter = st.date_input("Filtrar por fecha:")
    
    with col3:
        search_term = st.text_input("Buscar en descripciones:")
    
    # Botones de acci√≥n
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Actualizar Lista"):
            st.rerun()
    
    with col2:
        if st.button("üìä Exportar CSV"):
            try:
                items = firebase.get_all_inventory_items()
                if items:
                    df_data = []
                    for item in items:
                        df_data.append({
                            'ID': item.get('id', ''),
                            'Tipo': item.get('tipo', ''),
                            'Archivo': item.get('archivo', ''),
                            'Descripci√≥n': item.get('descripcion', ''),
                            'An√°lisis': item.get('analisis', ''),
                            'Timestamp': item.get('timestamp', '')
                        })
                    
                    df = pd.DataFrame(df_data)
                    csv = df.to_csv(index=False)
                    st.download_button(
                        label="üì• Descargar CSV",
                        data=csv,
                        file_name=f"inventario_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                else:
                    st.warning("No hay datos para exportar")
            except Exception as e:
                st.error(f"Error al exportar: {e}")
    
    with col3:
        if st.button("üóëÔ∏è Limpiar Base de Datos"):
            if st.checkbox("‚ö†Ô∏è Confirmar eliminaci√≥n de todos los elementos"):
                try:
                    items = firebase.get_all_inventory_items()
                    for item in items:
                        firebase.delete_inventory_item(item['id'])
                    st.success("‚úÖ Base de datos limpiada")
                    st.rerun()
                except Exception as e:
                    st.error(f"Error al limpiar: {e}")
    
    # Mostrar elementos
    try:
        items = firebase.get_all_inventory_items()
        
        # Aplicar filtros
        filtered_items = items
        
        if filter_type != "Todos":
            filtered_items = [item for item in filtered_items if item.get('tipo') == filter_type]
        
        if search_term:
            filtered_items = [item for item in filtered_items 
                            if search_term.lower() in item.get('descripcion', '').lower()]
        
        if date_filter:
            filtered_items = [item for item in filtered_items 
                            if item.get('timestamp', '').startswith(str(date_filter))]
        
        st.subheader(f"üìã Elementos Encontrados ({len(filtered_items)})")
        
        if filtered_items:
            for i, item in enumerate(filtered_items):
                with st.expander(f"üì¶ {item.get('tipo', 'Sin tipo')} - {item.get('timestamp', 'Sin fecha')[:19]}"):
                    col1, col2 = st.columns([1, 2])
                    
                    with col1:
                        st.write("**Tipo:**", item.get('tipo', 'N/A'))
                        st.write("**Fecha:**", item.get('timestamp', 'N/A')[:19])
                        st.write("**ID:**", item.get('id', 'N/A'))
                        
                        if item.get('tipo') == 'imagen' or item.get('tipo') == 'camera':
                            st.write("**Archivo:**", item.get('archivo', 'N/A'))
                    
                    with col2:
                        st.write("**Descripci√≥n:**", item.get('descripcion', 'N/A'))
                        st.write("**An√°lisis:**", item.get('analisis', 'N/A')[:200] + "..." if len(item.get('analisis', '')) > 200 else item.get('analisis', 'N/A'))
                    
                    # Botones de acci√≥n
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button(f"üëÅÔ∏è Ver Completo", key=f"view_{item['id']}"):
                            st.json(item)
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è Editar", key=f"edit_{item['id']}"):
                            st.session_state.editing_item = item
                            st.rerun()
                    
                    with col3:
                        if st.button(f"üóëÔ∏è Eliminar", key=f"delete_{item['id']}"):
                            try:
                                firebase.delete_inventory_item(item['id'])
                                st.success("‚úÖ Elemento eliminado")
                                st.rerun()
                            except Exception as e:
                                st.error(f"Error al eliminar: {e}")
        else:
            st.info("No se encontraron elementos con los filtros aplicados")
            
    except Exception as e:
        st.error(f"Error al cargar inventario: {e}")

# P√°gina de Informaci√≥n del Proyecto
elif page == "üë• Informaci√≥n del Proyecto":
    st.header("üë• Informaci√≥n del Proyecto")
    
    # Informaci√≥n de los autores
    st.subheader("üë®‚Äçüíª Desarrolladores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="author-info">
            <h4>üéì Estudiante Principal</h4>
            <p><strong>Nombre:</strong> Giuseppe S√°nchez</p>
            <p><strong>Universidad:</strong> Uniminuto</p>
            <p><strong>Programa:</strong> Ingenier√≠a de Sistemas</p>
            <p><strong>Rol:</strong> Desarrollador Principal</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="author-info">
            <h4>üè´ Instituci√≥n</h4>
            <p><strong>Universidad:</strong> Corporaci√≥n Universitaria Minuto de Dios</p>
            <p><strong>Facultad:</strong> Ingenier√≠a</p>
            <p><strong>Programa:</strong> Ingenier√≠a de Sistemas</p>
            <p><strong>A√±o:</strong> 2025</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Informaci√≥n t√©cnica del proyecto
    st.subheader("üîß Informaci√≥n T√©cnica")
    
    st.markdown("""
    <div class="feature-box">
        <h4>ü§ñ Tecnolog√≠as Utilizadas</h4>
        <ul>
            <li><strong>Streamlit:</strong> Framework web para la interfaz de usuario</li>
            <li><strong>Google Gemini AI:</strong> Modelo de inteligencia artificial para an√°lisis de im√°genes y texto</li>
            <li><strong>YOLOv8:</strong> Modelo de detecci√≥n de objetos en tiempo real</li>
            <li><strong>Firebase Firestore:</strong> Base de datos NoSQL en la nube</li>
            <li><strong>OpenCV:</strong> Procesamiento de im√°genes y visi√≥n por computadora</li>
            <li><strong>Python:</strong> Lenguaje de programaci√≥n principal</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="feature-box">
        <h4>üéØ Objetivos del Proyecto</h4>
        <ul>
            <li>Automatizar el reconocimiento de elementos de inventario</li>
            <li>Implementar an√°lisis inteligente con IA</li>
            <li>Crear una interfaz web intuitiva y f√°cil de usar</li>
            <li>Integrar m√∫ltiples tecnolog√≠as de vanguardia</li>
            <li>Facilitar la gesti√≥n de inventarios empresariales</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Caracter√≠sticas implementadas
    st.subheader("‚ú® Caracter√≠sticas Implementadas")
    
    features = [
        "üì∏ Captura de im√°genes con c√°mara web",
        "üìÅ Subida de archivos de imagen",
        "üß† An√°lisis inteligente con Gemini AI",
        "üéØ Detecci√≥n de objetos con YOLOv8",
        "üóÉÔ∏è Almacenamiento en Firebase",
        "üìä Dashboard con estad√≠sticas",
        "üìà Gr√°ficos interactivos",
        "üîç Sistema de b√∫squeda y filtros",
        "üì§ Exportaci√≥n de datos a CSV",
        "‚öôÔ∏è Configuraci√≥n personalizable"
    ]
    
    col1, col2 = st.columns(2)
    
    with col1:
        for feature in features[:5]:
            st.write(f"‚úÖ {feature}")
    
    with col2:
        for feature in features[5:]:
            st.write(f"‚úÖ {feature}")
    
    # Contacto y soporte
    st.subheader("üìû Contacto y Soporte")
    
    st.markdown("""
    <div class="author-info">
        <h4>üìß Informaci√≥n de Contacto</h4>
        <p><strong>Desarrollador:</strong> Giuseppe S√°nchez</p>
        <p><strong>Instituci√≥n:</strong> Uniminuto</p>
        <p><strong>Proyecto:</strong> Sistema de Reconocimiento de Inventario con IA</p>
        <p><strong>Versi√≥n:</strong> 2.0</p>
        <p><strong>√öltima actualizaci√≥n:</strong> Enero 2025</p>
    </div>
    """, unsafe_allow_html=True)

# P√°gina de Configuraci√≥n
elif page == "‚öôÔ∏è Configuraci√≥n":
    st.header("‚öôÔ∏è Configuraci√≥n del Sistema")
    
    # Estado de los servicios
    st.subheader("üîß Estado de los Servicios")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if yolo_model:
            st.success("‚úÖ YOLOv8: Conectado")
        else:
            st.error("‚ùå YOLOv8: Desconectado")
    
    with col2:
        if firebase:
            st.success("‚úÖ Firebase: Conectado")
        else:
            st.error("‚ùå Firebase: Desconectado")
    
    with col3:
        if gemini:
            st.success("‚úÖ Gemini AI: Conectado")
        else:
            st.error("‚ùå Gemini AI: Desconectado")
    
    # Configuraci√≥n de YOLO
    st.subheader("üéØ Configuraci√≥n de YOLO")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("**Modelo actual:** YOLOv8 Medium")
        st.info("**Confianza por defecto:** 0.5")
    
    with col2:
        st.info("**Clases detectables:** 80 objetos")
        st.info("**Velocidad:** ~200ms por imagen")
    
    # Configuraci√≥n de Gemini
    st.subheader("üß† Configuraci√≥n de Gemini AI")
    
    try:
        if hasattr(gemini, 'model') and gemini.model:
            model_name = str(gemini.model.model_name) if hasattr(gemini.model, 'model_name') else "Modelo activo"
            st.info(f"**Modelo actual:** {model_name}")
        else:
            st.info("**Modelo actual:** Modelo por defecto")
    except:
        st.info("**Modelo actual:** Modelo por defecto")
    
    # Informaci√≥n del sistema
    st.subheader("üíª Informaci√≥n del Sistema")
    
    import platform
    import sys
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Python:** {sys.version.split()[0]}")
        st.write(f"**Streamlit:** {st.__version__}")
        st.write(f"**Sistema:** {platform.system()}")
    
    with col2:
        st.write(f"**Arquitectura:** {platform.architecture()[0]}")
        st.write(f"**Procesador:** {platform.processor()}")
        st.write(f"**M√°quina:** {platform.machine()}")
    
    # Logs del sistema
    st.subheader("üìã Logs del Sistema")
    
    if st.button("üîÑ Actualizar Logs"):
        st.rerun()
    
    # Mostrar informaci√≥n de la sesi√≥n
    st.subheader("üîç Informaci√≥n de la Sesi√≥n")
    
    session_info = {
        "Timestamp de inicio": datetime.now().isoformat(),
        "Servicios cargados": len([x for x in [yolo_model, firebase, gemini] if x is not None]),
        "P√°gina actual": page,
        "Estado de la aplicaci√≥n": "Activa"
    }
    
    for key, value in session_info.items():
        st.write(f"**{key}:** {value}")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    <p>ü§ñ <strong>Sistema de Reconocimiento de Inventario con IA</strong></p>
    <p>Desarrollado por <strong>Giuseppe S√°nchez</strong> - Uniminuto 2025</p>
    <p>Powered by <strong>Gemini AI</strong>, <strong>YOLOv8</strong> y <strong>Firebase</strong></p>
</div>
""", unsafe_allow_html=True)
