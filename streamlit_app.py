import streamlit as st
from PIL import Image
import numpy as np
import cv2
import json
from collections import Counter

# Importa las nuevas clases que creaste
from firebase_utils import FirebaseUtils
from gemini_utils import GeminiUtils
from ultralytics import YOLO

# --- CONFIGURACI√ìN DE P√ÅGINA ---
st.set_page_config(
    page_title="Inventario Inteligente H√≠brido",
    page_icon="ü§ñ",
    layout="wide"
)

# --- CARGA DE MODELOS Y CONEXIONES (M√©todo robusto) ---
@st.cache_resource
def initialize_services():
    """Carga YOLO e inicializa Firebase y Gemini una sola vez."""
    try:
        yolo_model = YOLO('yolov8m.pt')
        firebase_handler = FirebaseUtils()
        gemini_handler = GeminiUtils()
        return yolo_model, firebase_handler, gemini_handler
    except Exception as e:
        # Mostramos el error de forma clara si algo falla al inicio
        st.error(f"**Error Cr√≠tico de Inicializaci√≥n.** No se pudo cargar un modelo o conectar a un servicio.")
        st.code(f"Detalle del error: {e}", language="bash")
        return None, None, None

# Inicializa todos los servicios
yolo_model, firebase, gemini = initialize_services()

# Si la inicializaci√≥n falla, detenemos la app
if not all([yolo_model, firebase, gemini]):
    st.stop()

# --- T√çTULO PRINCIPAL Y PESTA√ëAS ---
st.title("üß† Inventario Inteligente H√≠brido")
tab_inventario, tab_acerca_de = st.tabs(["üì∑ Reconocimiento de Inventario", "üë• Acerca de Nosotros"])

# --- PESTA√ëA PRINCIPAL DE LA APLICACI√ìN ---
with tab_inventario:
    col1, col2 = st.columns([2, 1])

    # --- PANEL DE CONTROL (COLUMNA 2) ---
    with col2:
        st.header("üìä Panel de Control")
        try:
            with st.spinner("Cargando inventario..."):
                # Usamos el objeto firebase inicializado para obtener los datos
                inventory_list = firebase.get_all_inventory_items()
            # Extraemos el nombre de cada item, que ahora est√° en el campo 'descripcion' o 'name'
            inventory_names = [item.get('descripcion') or item.get('name', 'Nombre no encontrado') for item in inventory_list]
        except Exception as e:
            st.error(f"Error al cargar inventario: {e}")
            inventory_names = []

        with st.expander("‚ûï A√±adir Nuevo Art√≠culo", expanded=True):
            new_item_name = st.text_input("Nombre del art√≠culo", key="add_item_input")
            if st.button("Guardar en Firebase", use_container_width=True):
                if new_item_name and new_item_name.strip() and new_item_name.strip() not in inventory_names:
                    # Creamos el diccionario de datos que tu nueva funci√≥n espera
                    data_to_save = {
                        "tipo": "manual",
                        "descripcion": new_item_name.strip(),
                        "analisis": "N/A",
                        "timestamp": firebase.get_timestamp()
                    }
                    firebase.save_inventory_item(data_to_save)
                    st.success(f"'{new_item_name.strip()}' a√±adido.")
                    st.rerun()
                else:
                    st.warning("El nombre no puede estar vac√≠o o ya existe.")

        st.subheader("üìã Inventario Actual")
        if inventory_names:
            st.dataframe([name for name in inventory_names if name != 'Nombre no encontrado'], use_container_width=True, column_config={"value": "Art√≠culo"})
        else:
            st.info("Inventario vac√≠o o no se pudo cargar.")
        
        st.subheader("‚úîÔ∏è Resultado del An√°lisis")
        if 'analysis_result' in st.session_state:
            st.success("An√°lisis completado:")
            st.json(st.session_state.analysis_result)
        else:
            st.info("Selecciona un objeto para analizarlo.")

    # --- CAPTURA Y AN√ÅLISIS (COLUMNA 1) ---
    with col1:
        st.header("üì∑ Captura y Detecci√≥n")
        img_buffer = st.camera_input("Apunta la c√°mara a los objetos", key="camera")

        if img_buffer:
            bytes_data = img_buffer.getvalue()
            cv_image = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)
            pil_image = Image.fromarray(cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB))
            
            with st.spinner("üß† Detectando objetos con IA local (YOLO)..."):
                results = yolo_model(pil_image)

            st.subheader("üîç Objetos Detectados")
            annotated_image = results[0].plot()
            annotated_image_rgb = cv2.cvtColor(annotated_image, cv2.COLOR_BGR2RGB)
            st.image(annotated_image_rgb, caption="Imagen con objetos detectados por YOLO.", use_container_width=True)

            detections = results[0]
            st.subheader("‚ñ∂Ô∏è Analizar un objeto en detalle")

            if not detections.boxes:
                st.info("No se detect√≥ ning√∫n objeto para analizar.")
            else:
                for i, box in enumerate(detections.boxes):
                    class_name = detections.names[box.cls[0].item()]
                    if st.button(f"Analizar '{class_name}' #{i+1}", key=f"classify_{i}", use_container_width=True):
                        # Recortar la imagen original de PIL para el an√°lisis de Gemini
                        coords = box.xyxy[0].cpu().numpy().astype(int)
                        x1, y1, x2, y2 = coords
                        cropped_pil_image = pil_image.crop((x1, y1, x2, y2))
                        
                        st.image(cropped_pil_image, caption=f"Recorte de '{class_name}' enviado para an√°lisis...")

                        with st.spinner(f"ü§ñ Gemini est√° analizando el recorte..."):
                            # Usamos el objeto gemini inicializado
                            analysis_text = gemini.analyze_image(cropped_pil_image, f"Objeto detectado como {class_name}")
                            try:
                                # Guardamos el JSON resultante en el estado de la sesi√≥n
                                st.session_state.analysis_result = json.loads(analysis_text)
                            except json.JSONDecodeError:
                                st.session_state.analysis_result = {"error": "La respuesta de la IA no fue un JSON v√°lido.", "raw_response": analysis_text}
                            st.rerun()

# --- PESTA√ëA "ACERCA DE" ---
with tab_acerca_de:
    st.header("üë• Sobre el Proyecto y sus Creadores")
    
    with st.container(border=True):
        col_img_est, col_info_est = st.columns([1, 3])
        with col_img_est:
            st.image("https://placehold.co/250x250/000000/FFFFFF?text=J.S.", caption="Joseph Javier S√°nchez Acu√±a")
        with col_info_est:
            st.title("Joseph Javier S√°nchez Acu√±a")
            st.subheader("_Estudiante de Ingenier√≠a Industrial_")
            st.subheader("_Experto en Inteligencia Artificial y Desarrollo de Software._")
            st.markdown(
                """
                - üîó **LinkedIn:** [joseph-javier-s√°nchez-acu√±a](https://www.linkedin.com/in/joseph-javier-s√°nchez-acu√±a-150410275)
                - üìÇ **GitHub:** [GIUSEPPESAN21](https://github.com/GIUSEPPESAN21)
                - üìß **Email:** [joseph.sanchez@uniminuto.edu.co](mailto:joseph.sanchez@uniminuto.edu.co)
                """
            )
    
    st.markdown("---")

    with st.container(border=True):
        col_img_prof, col_info_prof = st.columns([1, 3])
        with col_img_prof:
            st.image("https://placehold.co/250x250/2B3137/FFFFFF?text=J.M.", caption="Jhon Alejandro Mojica")
        with col_info_prof:
            st.title("Jhon Alejandro Mojica")
            st.subheader("_Profesor y Tutor del Proyecto_")
            st.markdown("- üìß **Email:** [jhon.mojica@uniminuto.edu.co](mailto:jhon.mojica@uniminuto.edu.co)")

    st.markdown("---")

    with st.container(border=True):
        st.subheader("üí° Acerca de esta Herramienta")
        st.markdown("""
        Esta aplicaci√≥n es una soluci√≥n avanzada para la gesti√≥n inteligente de inventarios. 
        Utiliza un modelo h√≠brido de IA que combina la detecci√≥n de objetos en tiempo real (**YOLO**) 
        con el an√°lisis profundo de im√°genes (**Google Gemini**), todo gestionado a trav√©s de una base de datos en la nube (**Firebase**).
        """)
